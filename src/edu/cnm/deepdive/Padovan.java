/*
 *  Copyright 2019 Nicholas Bennett & Deep Dive Coding
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package edu.cnm.deepdive;

import java.util.Iterator;

/**
 * Implements a generator for the Padovan sequence. This generator takes 2 forms: one is a static
 * methods returning the n<sup>th</sup> term of the sequence; the other (an extra credit problem)
 * implements the sequence as an {@link Iterable}.
 * <p>
 *   See [README](../../../../..) for background information on the Padovan sequence.
 * </p>
 * @author Nicholas Bennett & Deep Dive Coding Java + Android Bootcamp
 */
public class Padovan implements Iterable<Long> {

  // YOU DO NOT NEED TO USE OR MODIFY THIS FIELD IN THE BASIC PROBLEM!

  private int length;

  // YOU DO NOT NEED TO USE OR MODIFY THIS CONSTRUCTOR IN THE BASIC PROBLEM!

  /**
   * Initializes this instance as an {@link Iterable Iterable&lt;Long&gt;} over the first
   * <code>n</code> terms of the Padovan sequence.
   *
   * @param length number of terms in the sequence generated by this instance.
   */
  public Padovan(int length) {
    this.length = length;
  }

  // YOU DO NOT NEED TO USE OR MODIFY THIS ITERATOR METHOD IN THE BASIC PROBLEM.

  @Override
  public Iterator<Long> iterator() {
    return new PadovanIterator(length);
  }


  // THIS IS THE METHOD YOU MUST MODIFY IN THE BASIC PROBLEM!

  /**
   * Computes and returns the n<sup>th</sup> term of the Padovan sequence.
   *
   * @param n desired term of the sequence.
   * @return value of the n<sup>th</sup> term.
   */
  public static long generate(int n) {
    // TODO Compute and return the nth term, where the p0 = 0, p1 = 1, p2 = 1, etc.
    return 0;
  }


  // THIS IS THE CLASS YOU MUST MODIFY IN THE EXTRA CREDIT PROBLEM!

  public static class PadovanIterator implements Iterator<Long> {

    public PadovanIterator(int length) {
      // TODO initialize any fields needed to provide an iterator over the first length terms.
    }

    @Override
    public boolean hasNext() {
      // TODO Compute and return a flag indicating if there are any values remaining to iterator over.
      return false;
    }

    @Override
    public Long next() {
      // TODO Compute and return the next value in the sequence.
      return null;
    }

  }

}
